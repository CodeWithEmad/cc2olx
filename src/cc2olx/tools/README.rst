Tools
######

.. _video_upload_tool:

Video Upload Tool
=================

The video upload tool uploads video files and associated transcripts to edX's video encoding pipeline.
It also generates an output CSV that can be used as input to the video xBlock conversion tool.

Input
-----
The tool takes as positional command line arguments a ``course-id``, a ``directory``, and an ``input-csv``.
The tool also optionally takes as a keyword argument an ``--output-csv``.

The ``course-id`` argument is the ID of the course as it appears in Studio. For example, ``course-v1:edX+111222+111222``.

The ``directory`` argument is a directory (such as the one created by the video download tool) containing video files and transcripts, that will be uploaded to edX's video encoding pipeline.
The currently supported formats for the videos are ``mp4`` and ``mov``, which are the files supported by the edX video encoding pipeline.
The tool will recurse into the provided directory and files at any depth, and matching the supported formats will be uploaded.
The only supported format for transcripts is ``srt``, and transcript files must have the same location and base name as their associated video, apart from the suffix.
For example for a video file named video_name.mp4 the tool will find transcripts in the same directory, named like video_name.XX.srt where XX is a language code.
Note that files of other types will be ignored by the tool.

The ``input-csv`` argument is a file that is meant to establish a relationship between a particular video, its externally hosted URL, and the edX video ID that is generated by the video encoding pipeline when the video is uploaded.

The ``--output-csv`` argument is a path to where the output CSV file should be saved. This argument is optional. If the argument is not supplied, the default is ``None``. If the argument is not supplied, then the file will be saved to the same directory as the input file as specified by the ``input-csv`` command line argument, and the name of the CSV fill will be the name of the original CSV file supplied as a command line argument with "upload-results" appended to the end of the name, i.e. ``<original-filename>-upload-results.csv``.

In order to for this tool to run successfully, the following must be true of the CSV.

* Each row in the file should describe a single video that appears in the directory supplied as a command line argument.
* The CSV should contain a header row, labeling each column.
* The first column should be labeled "Relative File Path". The values for this column should be the paths to the video files relative to the directory supplied as a command line argument. For example, if the directory is ``/Users/example/workspaces/videos`` and the video is located at ``/Users/example/workspaces/videos/unit_1/video_1.mp4``, the value of this cell should be ``unit_1/video_1.mp4``.
* The CSV should contain the columns "External Video Link" and "Youtube Id". They can appear anywhere in the file as long as "Relative File Path" remains the first column.
* Empty values should be represented as empty cells. Do not use "NONE", "N/A", etc.

Output
------
The tool will generate a CSV file. If the optional command line argument ``--output-csv`` is supplied, then the output CSV will be saved to that path. Otherwise, if the command line argument is not supplied, then the file will be saved to the same directory as the input file as specified by the ``input-csv`` command line argument, and the name of the CSV fill will be the name of the original CSV file supplied as a command line argument with "upload-results" appended to the end of the name, i.e. ``<original-filename>-upload-results.csv``.

Two new columns will be appended to the end of the file:
* "Edx Id", which represents the edX Video ID for each video
* "Languages", a list of dash separated, alphabetically ordered language codes for which transcripts were uploaded for each video.

Otherwise, the file is identical to the file supplied as a command line argument.

Logs
----
The tool will log to the console any errors that are encountered during execution.

You can redirect the output to a file for later inspection.::

    python src/cc2olx/tools/video_upload.py course-v1:edX+111222+111222 /Users/example/workspaces/videos /Users/example/workspaces/video-data.csv > logs.txt

.. _authentication:
Authentication
--------------
The video upload tool makes calls to a Studio API. In order to make authenticated calls to Studio to generate signed URLs for uploading videos, you will need to supply valid credentials.

If you are an edX staff user, you can use the client credentials associated with a cc2olx oAuth2 application registered in the desired environment. If you are not an edX staff user, you will have to go through the process for generating a client ID and client secret. You can use the `instructions <https://course-catalog-api-guide.readthedocs.io/en/latest/authentication/#getting-a-client-id-and-client-secret
/>`_ for generating credentials for using the edX Course Catalog API.

You should export these credentials into your environment in order for the tool to work. The client ID and client secret should have the names ``CC2OLX_CLIENT`` and ``CC2OLX_SECRET``, respectively.

We have decided not to support supplying credentials via command line arguments to avoid exposing secrets in clear text.

Use
---
The video upload tool is a command-line Python 3 program.

In order to use this tool, please follow the instructions described in :ref:`authentication`.

Once these are done, you can run the tool as follows::

    python src/cc2olx/tools/video_upload.py course-v1:edX+111222+111222 /Users/example/workspaces/videos /Users/example/workspaces/video-data.csv

Or, if you would like to specify the path to the output CSV file::
    python src/cc2olx/tools/video_upload.py course-v1:edX+111222+111222 /Users/example/workspaces/videos /Users/example/workspaces/video-data.csv --output-csv /Users/example/workspaces/video-data-output.csv

.. _video_download_tool:

Video Download Tool
===================
The download tool will accept a common cartridge format course, and search for matching videos to download, in preparation for use with the video upload tool.
It also generates a CSV in a format that can be used by the video upload tool for inclusion in the edX video pipeline (by default "out.csv").

Input
-----
The tool has one required parameter ``-i`` or ``--input``, which is the Common Cartridge Course (IMSCC) format archive, or single HTML file. This is searched for iframes with video links.
The tool will download the raw video for any embedded video links, as well as associated transcripts, and store these in the `downloads` folder in the current working directory.

The ``--output`` argument allows for specifying an alternative filename to store the CSV metadata generated for downloaded videos.

The ``--downloads`` argument will specify an alternative directory for storing downloaded video data.

The ``--simulate`` argument allows for a dry-run of parsing and extracting URLs for download, without actually downloading the video content.

The ``--config`` argument allows for providing extra configuration to youtube-dl which is used to handle video downloading.

Output
------
Unless otherwise specified with the options above, the tool will generate a file ``out.csv`` containing the URL to the video, file path of the downloaded video, and a YouTube ID if the video was originally hosted on YouTube.
The tool will also create a `downloads` directory with the raw videos downloaded, and any transcripts or subtitles associated with the videos.

Use
---
The video download tool is a basic command-line Python 3 program.
This can be run simply against a Common Cartridge Format Course (IMSCC) file as so::

    python src/cc2olx/tools/video_download.py -i ~/ushistory.imscc

This tool is most useful by chaining it with the video upload tool, in which case the video upload tool can be run in the same directory after download is complete like so::

    python src/cc2olx/tools/video_upload.py course-v1:edX+111222+111222 ./downloads ./out.csv

import io
import tarfile
import xml.dom.minidom

class OlxExport:
    def __init__(self, cartridge):
        self.cartridge = cartridge
        self.doc = None

    def xml(self):
        self.doc = xml.dom.minidom.Document()
        self.doc.appendChild(self.doc.createComment(" Generated by cc2olx "))
        xcourse = self.doc.createElement("course")
        self.doc.appendChild(xcourse)
        xcourse.setAttribute("org", self.cartridge.get_course_org())
        xcourse.setAttribute("course", "Some_cc_Course")
        xcourse.setAttribute("name", self.cartridge.get_title())
        tags = "chapter sequential vertical".split()
        self._add_olx_nodes(xcourse, self.cartridge.normalized['children'], tags)
        return self.doc.toprettyxml()

    def _add_olx_nodes(self, elt, data, tags):
        leaf = False
        if not tags:
            tags = ["html"]
            leaf = True
        for dd in data:
            child = self.doc.createElement(tags[0])
            if "title" in dd:
                child.setAttribute("display_name", dd["title"])
            if leaf:
                content = None
                if "identifierref" in dd:
                    idref = dd["identifierref"]
                    content = self.cartridge.get_resource_content(idref)
                if content is None:
                    content = "<p>MISSING CONTENT</p>"
                txt = self.doc.createCDATASection(content)
                child.appendChild(txt)
            elt.appendChild(child)
            if "children" in dd:
                self._add_olx_nodes(child, dd["children"], tags[1:])

def onefile_tar_gz(filetgz, contents, string_name):
    data = 'hello, world!'

    tarinfo = tarfile.TarInfo(string_name)
    tarinfo.size = len(contents)

    with tarfile.open(filetgz, 'w:gz') as tgz:
        tgz.addfile(tarinfo, io.BytesIO(contents))
